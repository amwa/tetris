//Amy Wang
//Final Project Part 2 - TetrisPiece.java
//5/11/15
//A simple tetris piece, randomly generated upon construction, that exhibits certain behavior
//depending on user input passed in by the TetrisBoard program 

import java.util.*;
import java.awt.*;

public class Tile
{
/* The length of one side of one of the Location objects composing the Tile
 */
   private int locsize;
/* The character corresponding to one of the four convential Tetris piece shapes--
 * dictates the shape of the Tile (must be either "I", "L", "O", "Z")
 */
   private char tiletype; 
/* The Color in which the Tile will be filled in on the TetrisBoard
 */
   private Color tilecolor;
/* The Graphics object upon which the Tile will be drawn
 */
   private Graphics g; 
/* An array containing all the Locations currently occupied by the Tile
 */
   private Location[] locations; 
/* The TetrisBoard upon which the Tile is located
 */
   private TetrisBoard board;

/* Constructor method; creates a new Tile with a random Color and a random type. Depending on the
 * tiletype generated by generateType(random), fills in the indices of the locations array with the 
 * correct arrangement of Locations (one long column of Locations for 'I', an L shaped arrangement for 'L', etc.)
 * @param b - the TetrisBoard upon which the Tile is located
 * @param size - the length of one side of one of the Location objects composing the Tile
 */
   public Tile (TetrisBoard b, int size) 
   {
      board = b;
      locsize = size;	
      locations = new Location[4];
      Random random = new Random();
      tiletype = generateType(random);
      tilecolor = new Color(random.nextInt(255), random.nextInt(255), random.nextInt(255));
      
      if(tiletype=='I')
      {     
         for(int ii=0; ii<locations.length; ii++)
         {
            locations[ii] = new Location(locsize, 0, ii, tilecolor);
         }
      }
      else if (tiletype=='L')
      {
         for(int ii=0; ii<locations.length-1; ii++)
         {
            locations[ii] = new Location(locsize, 0, ii, tilecolor);
         } 
         locations[locations.length-1] = new Location(locsize, 1, locations.length-2, tilecolor); 
      } 	
      else if (tiletype=='O')
      {
         for(int ii=0; ii<2; ii++)
         {
            locations[ii] = new Location(locsize, 0, ii, tilecolor);
         }
         for(int ii=2; ii<4; ii++)
         {
            locations[ii] = new Location(locsize, 1, ii-2, tilecolor);
         } 
      } 
      else if (tiletype=='Z')
      {  
         for(int ii=0; ii<2; ii++)
         {
            locations[ii] = new Location(locsize, 0, ii, tilecolor);
         }
         for(int ii=2; ii<4; ii++)
         {
            locations[ii] = new Location(locsize, 1, ii-1, tilecolor);
         }
      }
      /*else
      {
         throw new Exception("Invalid Piece"); 
      }*/
   }

/* Returns the "locations" array composing the shape of the Tile
 * @return locations - an array containing all the Locations currently occupied by the Tile
 */
   public Location[] getLocations()
   {   
      return locations;
   }

/* Returns the "locations" array composing the shape of the Tile
 * @return locations - an array containing all the Locations currently occupied by the Tile
 */
   public Color getColor()
   {
      return tilecolor;
   }

/* "Rotates" the piece counterclockwise 90 degrees - implementation unfinished due to lack of time :(
 */
   public void rotate()
   {
      //Location[] templocs = locations; 
   }
   
 /* Draws the Tile onto the screen by filling in each Location contained in the locations array, using
  * the drawSelf(g) method found in the Location class. Also literally "fills in" the Locations by using the 
  * Locations.fill() method to set the "full" instance variable to be true for each Location in the array.
  * @param g - the Graphics object used to draw the image onto the sceen
  */ 
   public void drawSelf(Graphics g)
   {
      for(int ii=0; ii<locations.length; ii++)
      {
         Location l = locations[ii];
         l.fill();
         l.drawSelf(g);
      }
   }

/* Randomly generates a tile type, using a Random object and if/else logic
 * to assign a character (either I, O, L, or Z) to the Tile
 * @param random - a Random object used to generate a random integer used to generate a random character or type for the Tile
 * @return - the character, corresponding to a certain "Tile type", that will be assigned
 * to the Tile
 */
   public char generateType(Random random) //maybe move to Tile method?
   {
      int tiletype = random.nextInt(4);
      if(tiletype==0)
      {
         return 'I';
      }
      else if(tiletype==1)
      {
         return 'O';
      }
      else if(tiletype==2)
      {
         return 'L';
      }
      else
      {
         return 'Z';
      }
   }

/* "Moves" the piece by erasing each location and moving it 1 block to the left, right, or down, depending on the parameter,
 * Parameter is passed-in by the TetrisBoard program, which takes in user input (i.e. key pressing) and converts it to calls on 
 * this method
 * @param key - a character value responding to the key that was pressed - either "<", ">", "^", or "v" (borrowed shamelessly from
 * the Bird class of assignment 10)
 * @return - true if the Tile moved successfully, false otherwise. 
 */
   public boolean move(char key) 
   {
      boolean canmove = true;
      Location[] newloc = new Location[locations.length];
      for(int ii=0; ii<locations.length; ii++)
      {
         Location temp = locations[ii];
         int tempx = temp.getX();
         int tempy = temp.getY();
         if(key=='v')
         {
            tempy += 1;//adds locsize to the y value of the point--moves the location down 1 unit
         }
         else if(key=='^')
         {
            rotate();
         }
         else if(key=='<')
         {
            tempx -= 1; 
         }
         else if(key=='>')
         {
            tempx += 1; //adds locsize to the y value of the point--moves the location down 1 unit
         }
          /* else throw exception
          else
          {
             locations[ii] = newloc;
          } */
         Location loc = new Location(locsize, tempx, tempy, tilecolor);
         if(!board.checkFull(loc))
         {
            newloc[ii] = loc;
         }
         else
         {
            canmove = false;
         }
      }
      if(canmove)
      {
         locations = newloc;
      }
      return canmove;
   }

/* Erases the Tile from the board by emptying out each of the Locations in the locations array
 */ 
   public void eraseSelf()
   {
      for(int ii=0; ii<locations.length; ii++)
      {
         Location l = locations[ii];
         l.empty();
      }
   }
}




































































































